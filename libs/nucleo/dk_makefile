OBJ_PATH = bin
SRC_DIR  = src

LIBNAME  = sdc_nucleo
LIBFILE  = lib/lib$(LIBNAME).a
SUBDIRS  = $(shell find -L $(SRC_DIR) -type d | grep -v '^\.\w')
OBJ_DIRS = $(patsubst $(SRC_DIR)%,$(OBJ_PATH)%,$(SUBDIRS))

SRC_CPP	= $(foreach sdir,$(SUBDIRS),$(wildcard $(sdir)/*.cpp))
SRC_CC	= $(foreach sdir,$(SUBDIRS),$(wildcard $(sdir)/*.c))
SRC_AS	= $(foreach sdir,$(SUBDIRS),$(wildcard $(sdir)/*.S))
OBJECTS = $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_PATH)/%.o,$(SRC_CPP)) \
		  $(patsubst $(SRC_DIR)/%.c,$(OBJ_PATH)/%.o,$(SRC_CC)) \
		  $(patsubst $(SRC_DIR)/%.S,$(OBJ_PATH)/%.o,$(SRC_AS))
INCLUDE_PATHS = $(addprefix -I, $(SUBDIRS))

############################################################################### 
GCC_BIN =
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
AR      = $(GCC_BIN)arm-none-eabi-ar rs

CPU = -mcpu=cortex-m4 -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=$(FLOAT_ABI)
CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -ffunction-sections -fdata-sections -fomit-frame-pointer
#CC_FLAGS += -fPIC
VERSION = -std=c++14

#CC_FLAGS += -MMD -MP
CC_SYMBOLS = -DTARGET_RTOS_M4_M7 -DTARGET_FF_ARDUINO -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC \
			 -DTARGET_STM32F401RE -DTARGET_FF_MORPHO -DTARGET_CORTEX_M -D__FPU_PRESENT=1 \
			 -D__MBED__=1 -DTARGET_NUCLEO_F401RE -DTARGET_M4 -DTARGET_STM \
			 -DMBED_BUILD_TIMESTAMP=1454240865.25 -DTARGET_STM32F4 -D__CORTEX_M4 -DARM_MATH_CM4 

# Divers
MAKE		= make --no-print-directory
DEPFILE		= .depends
RM			= rm -f
SHELL		= bash
CHOWN       = chown $(UID):$(GID)
CHOWNR      = chown -R $(UID):$(GID)

ifeq ($(HARDFP),1)
	FLOAT_ABI = hard
else
	FLOAT_ABI = softfp
endif

ifeq ($(DEBUG), 1)
  CC_FLAGS += -DDEBUG -O0
else
  CC_FLAGS += -DNDEBUG -Os
endif

.SUFFIXES: .cpp .hpp .o .h .c .S

.PHONY : all clean deps check_dirs

vpath %.cpp $(SUBDIRS)
vpath %.c   $(SUBDIRS)
vpath %.S   $(SUBDIRS)

define make-goal
$1/%.o : %.cpp
	@echo "Compilation de $$<..."
	@$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) $(VERSION) -fno-rtti $(INCLUDE_PATHS) -o $$@ $$<

$1/%.o : %.S
	@echo "Compilation de $$<..."
	@$(CC) $(CC_FLAGS) $(CPU) -o $$@ $$<

$1/%.o : %.c
	@echo "Compilation de $$<..."
	@$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) $(INCLUDE_PATHS) -o $$@ $$<
endef


all: check_dirs $(LIBFILE)

check_dirs: $(OBJ_DIRS)

$(OBJ_DIRS):
	@mkdir -p $@

$(LIBFILE): $(OBJECTS)
	@echo Création de l\'archive $@...
	@$(AR) $@ $^
	@$(CHOWN) $@

# Création des commandes de compilation pour chaque répertoire
$(foreach sdir,$(OBJ_DIRS),$(eval $(call make-goal,$(sdir))))

clean : 
	$(RM) -r $(OBJ_PATH) $(LIBFILE)

deps : $(SRC_CPP)
	@$(CPP) $(VERSION) $(INCLUDE_PATHS) -MM $+ \
		| sed -r 's|^(\S*:\s)($(SRC_DIR)/(\S*/))?|$(OBJ_PATH)/\3\1\2|' > $(DEPFILE)

sinclude $(DEPFILE)
