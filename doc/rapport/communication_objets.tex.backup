\chapter{La création des objets}

\section{Reconnaissance vocale : Application Android}
	\subsection{Etat de l’art}	
Tout projet implique une phase de recherche, afin d'effectuer un état de l'art sur ce qu'il a déjà été fait 
auparavant dans ce domaine. Afin de rechercher ce qu'il fallait pour cet état de l'art, il a donc fallu 
décomposer en plusieurs parties ce que devait réellement réaliser cette reconnaissance. Ces parties étaient :

\begin{itemize}
\item Activation de la reconnaissance vocale automatiquement
\item Gestion de la chaine de caractères comprise par la reconnaissance
\end{itemize}

De base sur Android, il est possible d'activer la reconnaissance vocale  automatiquement grâce aux mots clefs 
« OK Google ». Souhaitant appeler notre intelligence domotique Jarvis, il était peu souhaitable de dire ces 
mots afin d'activer la reconnaissance.
Après recherches, il s'avère qu'il n'existe aucun moyen simple de changer ces mots clefs, puisque les seuls 
moyens sont soit d'avoir un téléphone rooté, autrement dit où l'on a tous les accès afin de changer le bon 
fichier de configuration. Soit d'avoir un téléphone de la marque Motorola, qui intègre le changement de ces 
mots directement dans son firmware. C'est pourquoi pour activer la reconnaissance vocale, nous sommes obligés 
de prononcer les mots « OK Google ».
	
	\subsection{Activation de la reconnaissance vocale}
	
Afin de pouvoir démarrer et utiliser la reconnaissance vocale, il faut un ensemble d'éléments :
\begin{itemize}
 \item Autovoice
 \item Tasker
\end{itemize}

Autovoice est une application Android qui permet d'utiliser la reconnaissance vocale de Google, et de se 
servir de la chaîne de caractères reconnues pour en faire ce que l'on souhaite. Par ailleurs, on peut la 
paramétrer de telle sorte qu'elle réagise seulement si une suite de mots clefs est reconnue. Afin de pouvoir 
communiquer avec Jarvis, le seul mot clef choisi a donc été son nom. Du côté de Tasker, c'est une application 
d'automatisation très connue sur Android. Elle permet de réaliser des tâches en réponse à un événement donné. 
Ainsi il est possible d'utiliser comme événement Autovoice, et comme tâche, une application qui permet de 
traiter la chaîne de caractères : SpeechRecognition.

	\subsection{SpeechRecognition}
	
SpeechRecognition (SP) est une application Android qui permet donc d'interpréter une chaîne de caractères, et 
d'envoyer une trame suivant le protocole SDCP au bon objet connecté. l'application possède deux bases de 
données. La première possède l'ensemble des objets intelligents. Cette base de données est stockée dans un 
fichier JSON.

\begin{lstlisting}[caption=Base de données des objets intelligents][frame=single]
{
    "smartDevices" : [
      {
        "device": {
          "idAction": "0x111",
          "bleName": "sdc_Lisa"
        }
      }]
}
\end{lstlisting}

Cette base de données comprend une liste des objets connectés proches de nous. Comme on peut le voir un objet 
est caractérisé par deux choses : l'identifiant de l'action qu'il peut réaliser, ainsi que le nom de l'objet 
bluetooth auquel il faut se connecter pour réaliser l'action.

\begin{lstlisting}[caption=Base de données des commandes vocales][frame=single]
{
    "voiceCommands" : [
      {
        "command" : {
            "voiceActivation" : "Quelle est la température",
            "voiceDiction" : "la température est",
            "idAction" : "0x111"
        }
      }]
}
\end{lstlisting}

Ainsi une commande vocale est caractérisée par une chaîne de caractères à reconnaître, une chaîne de 
caractères à dire par synthèse vocale, afin de donner un feedback sur ce qu'il se passe à l'utilisateur. Elle 
contient elle aussi l'id de l'action à réaliser, afin de faire le lien avec l'autre base de données.

La première chose a faire est de reconnaître quelle requête l'utilisateur souhaite réaliser. Pour ce faire, 
l'application réalise un algorithme sur la chaîne reçue par reconnaissance vocale, dont le but est d'évaluer 
la similarité avec l'ensemble des phrases possibles. La distance minimale caractérisera la requête faite par 
l'utilisateur. Il existe différents algorithmes : Levenshtein, JaroWinkler, et Fuzzy. 

\paragraph{La distance de Levenshtein}est la plus simple des 3. Celle-ci calcule le nombre de différences 
qu'il y a entre deux chaînes de caractères. Ces différences peuvent être le remplacement, la suppression, ou 
l'insertion d'un caractère.

\paragraph{La distance de JaroWinkler} part de la distance de Jaro dont l'équation est:
\begin{equation}
 d = \frac{1}{3}(\frac{m}{|s1|}+\frac{m}{|s2|}+\frac{m-t}{m})
\end{equation}

où :
\begin{itemize}
 \item $|s_i|$ est la longueur de la chaîne de caractères de la chaîne 'i'
 \item $m$ est le nombre de caractères \emph{correspondants} dans les 2 chaînes
 \item $t$ est le nombre de transpositions nécessaires de ces caractères partagés
\end{itemize}

Deux caractères de $s_1$ et $s_2$ sont dit \emph{correspondants} lorsque leur éloignement dans leur chaine 
respective ne dépasse pas :
\begin{equation}
 \lfloor{1}
\end{equation}


puis on calcule la distance avec cette équation :
\begin{equation}
 d_w = d_j + (l_p(1-d_j))
\end{equation}

avec :
\begin{itemize}
 \item $d_j$ est la distance de Jaro entre $s_1$ et $s_2$
 \item $l$ est la longueur du préfixe commun (avec un maximum de 4 caractères)
 \item $p$ est un coefficient qui permet de favoriser les chaînes avec un préfixe commun. Winkler propose 
pour valeur $p=0.1$.

\end{itemize}


\paragraph{La distance de fuzzy}est une des autres manières de calculer la similarité entre deux phrases. 
Celle-ci permet d'évaluer le nombre de correspondance entre 2 chaînes, ainsi un point est donné pour chaque 
caractère en commun dans les 2 chaines, et deux points s'il y a une séquence de caractères. La formule est : 

	\subsection{Intégration du protocole}

	\subsection{Communiquer avec les protocoles BLE et WiFi}
\section{Les actionneurs}
\section{Les capteurs}


