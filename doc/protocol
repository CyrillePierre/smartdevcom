Description du protocole de communication du réseau virtuelle.
Auteurs : Thomas IMPERY, Cyrille PIERRE
Version : 0.1

1 - Presentation
	Ce document décrit le fonctionnement du protocole mis en place pour
	la communication entre des objets connectés dans un réseau virtuelle.
	Ce réseau a la particularité d'être indépendant de la technologie de
	communication des objets. Cela signifie qu'il doit être implémenté
	comme une surcouche au protocole spécifique à la technologie de
	communication utilisé par l'objet. Dans le cas du Wifi par exemple, ce
	protocole se situera au niveau de la couche applicative du protocole
	TCP/IP.

	Le protocole définit ici va lui même se découper en deux niveaux :
		- la couche VLL (virtual logic link)
		- la couche applicative

2 - Le protocole VIP
	Virtual IP (VIP) est un protocole qui s'occupe de la couche transport
	du réseau virtuel. Il est inspiré du procole IP et possède donc
	quelques caractéristiques similaire.

	2.1 - En-tête du paquet

        |0  |4  |8  |12 |16 |20 |24 |28 |32 |36 |40 |44 |48 |52 |56 |60 |64

        ,---------------------------------------------------------------,
        | P  |V |  TTL  |       ADDR_SRC        |       ADDR_DEST       |
        '---------------------------------------------------------------'

		P         (5 bits)  : protocole (0b00000)
		V         (3 bits)  : version du protocole (0b000)
		TTL       (8 bits)  : durée de vie du paquet
		ADDR_SRC  (24 bits) : addresse de l'objet qui envoie la commande
		ADDR_DEST (24 bits) : addresse de l'objet qui reçoit la commande

	2.2 - Protocole (P)
		Les 5 premiers bits sont dédié à la détermination du protocole qui
		est encapsulé dans la couche VLL. Dans le cas du protocole VIP, ces
		bits valent 0b00000. Si le paquet correspond à un autre protocole,
		la valeur de ces bits est différente.
	
	2.3 - Version du protocole (V)
		Actuellement, la version du protocole est à 0 mais si jamais une
		modification de l'en-tête du protocole VIP venait à arriver, il
		suffirait d'indiquer une autre valeur dans le champ V pour que les
		communications utilisant l'ancien protocole ne soient pas
		perturbées.

	2.4 - Time to live (TTL)
		La durée de vie est utilisée pour éviter qu'un paquet ne reste trop
		longtemps sur le réseau. Cela peut arriver lorsque le graphe du
		réseau virtuel est cyclique et que le routage du paquet le fait
		tourner en rond.

		Ce champ contient un nombre définit à la création du paquet. Ce
		nombre sera alors décrémenté à chaque passage dans un routeur
		(objet faisant passerelle entre plusieurs support de
		 communication). Si le nombre atteint la valeur 0 alors la
		transmission du paquet sera interrompu.

	2.5 - Les addresses (ADDR_SRC et ADDR_DEST)
		Les champs ADDR_SRC et ADDR_DEST sont respectivement utilisé pour
		renseigner l'adresse de l'objet source et de l'objet destinataire.
		Une adresse est constitué de 3 octets dont chacun à une fonction
		précise :

			|0  |2  |4  |6  |8  |10 |12 |14 |16 |18 |20 |22 |24
			
			,-----------------------------------------------,
			|   ADDR_NET    |  ADDR_SUB_NET  |   ADDR_OBJ   |
			'-----------------------------------------------'

			ADDR_NET     (8 bits) : adresse de réseau
			ADDR_SUB_NET (8 bits) : adresse de sous-réseau
			ADDR_OBJ     (8 bits) : adresse d'objet

		Chaque objet peut être classé dans 3 niveaux de hiérarchie qui sera
		déterminé par la valeur de son adresse complète. On peut donc
		facilement localiser où se trouve un objet dans le réseau
		simplement avec son adresse. Par défaut, un objet n'est capable de
		communiquer qu'avec les objets présents dans le même sous-réseau
		que lui. Il peut cependant parler avec des objets d'autres réseau
		si le sous-réseau est équipé de routeur.

		2.5.1 - Représentation d'une adresse
			La forme générale de la représentation d'une adresse est la
			suivante :

				<NB_HEX>:<NB_HEX>:<NB_HEX>

				NB_HEX : un nombre hexadécimal à deux chiffres

			Voici quelques exemples d'adresses :
				0f:34:02	réseau 0x0f, sous-réseau 0x34, objet 0x02
				aa:b2:27	réseau 0xaa, sous-réseau 0xb2, objet 0x27
				aa:32:1c	réseau 0xaa, sous-réseau 0x32, objet 0x1c

		2.5.2 - Adresses particulières
			Certaines adresses sont réservées pour des utilisations
			spéciales. Chaque niveau d'adressage (chaque octet) ne peut
			contenir la valeur 0x00 ou 0xff :
				- 0x00 : adresse de réseau
				- 0xff : adresse de broadcast
			L'adresse de réseau renseigne sur un réseau ou un sous-réseau
			spécifique et non un objet connecté à ce réseau/sous-réseau.
			L'adresse de broadcast permet d'envoyer un paquet à tous les
			objets appartenant à un réseau/sous-réseau spécifique.

			Voici quelques exemples de ce type d'adresses :
				23:00:00	adresse du réseau 0x23	
				23:4b:00	adresse du sous-réseau 0x4b du réseau 0x23
				23:4b:ff	adresse de broadcast du sous-réseau précédent
				23:ff:ff	broadcast à tous les objets du réseau 0x23
				ff:ff:ff	broadcast à tous le monde (à modérer)
				00:00:00	adresse du réseau virtuel (utile pour les
							routeurs)

3 - Protocole VARP
	Le protocole VARP est une imitation du protocole ARP mais appliqué au
	réseau virtuel. Il permet de rechercher une adresse du support de
	communication à partir d'une adresse dans le réseau virtuelle. Cela
	permet de savoir à qui envoyer le paquet lorsque l'on souhaite faire
	une requête à un objet connecté.

	3.1 - En-tête du paquet
		(représentation pour les paquets VARP encapsulé par du TCP/IP)
		
		   |0  |4  |8  |12 |16 |20 |24 |28 |32 |36 |40 |44 |48 |52 |56 |60 |

		-- ,---------------------------------------------------------------,
		00 | P  |V |OP|SCAL|          SC_ADRR_SRC          |   ADDR_SRC    |
		-- ;---------------------------------------------------------------'
		64 |       |        SC_ADDR_DEST       |       ADDR_DEST       |
		-- '-----------------------------------------------------------'

		P            (5 bits)  : protocole (0b00001)
		V            (3 bits)  : version (0b000)
		OP           (3 bits)  : opération réalisée
		SCAL         (5 bits)  : taille de l'adresse du support de com
								 (en octets)
		SC_ADDR_SRC  (xx bits) : adresse du support de communication de
								 l'objet source
		ADDR_SRC     (24 bits) : adresse de l'objet source dans le réseau
								 virtuel
		SC_ADDR_DEST (xx bits) : adresse du support de communication de
								 l'objet destinataire
		ADDR_DEST    (24 bits) : adresse de l'objet destinataire dans le réseau
								 virtuel
								 

	3.2 - Protocole
		Dans le cas du protocole VARP, la valeur du premier champ P du
		paquet vaut 0b00001.
	
	3.3 - Version du protocole
		Cette version est la première version donc V vaut 0b000

	3.4 - Code d'opération
		Le code d'opération (OP) permet de déterminer comment doit être
		interprété le paquet envoyé. Il existe actuellement 3 valeurs
		possibles :
			- 0b000 : Le paquet est une demande d'adresse de support. Cela
					  signifie que l'on connait l'adresse de l'objet dans
					  le réseau virtuelle mais pas son adresse dans le
					  support de com.
			- 0b001 : Le paquet est une demande d'adresse virtuel. Cela
					  signifie que l'on connait l'adresse de l'objet dans
					  le support de com mais pas dans le réseau virtuel
			- 0b010 : Réponse à une demande d'adresse

	3.5 - Adresses sources et destination
		Le protocole VARP doit pouvoir fonctionner sur plusieurs supports
		de communication différents. En fonction de ces supports, leur
		adresse n'aura pas forcément la même forme. Étant donné qu'il est
		nécessaire de renseigner cette adresse dans la trame VARP, il faut
		indiquer leur taille. Cet info doit être stocké (en octets) dans 
		SCAL.

		Les champs des adresses sources doivent être entièrement remplis.
		Pour le champ inconnu du destinataire, il doit être rempli par
		l'adresse de broadcast (c'est à dire, que des bits à 1).

	3.6 - Exemple
		Voici quelques exemples de paquets VARP:

		Exemple 1 :
			Demande d'adresse du support pour l'objet ayant l'adresse
			virtuelle 1b:c7:05

			OP           = 0b000
			SCAL         = 4
			SC_ADDR_SRC  = 192.167.28.4
			ADDR_SRC     = 1b:c7:03
			SC_ADDR_DEST = 255.255.255.255
			ADDR_DEST    = 1b:c7:05

		Exemple 2 :
			Réponse à la requête précédente. L'objet à l'adresse virtuelle
			1b:c7:05 possède l'adresse de support 192.167.28.82

			OP           = 0b010
			SCAL         = 4
			SC_ADDR_DEST = 192.167.28.82
			ADDR_DEST    = 1b:c7:05
			SC_ADDR_DEST = 192.167.28.4
			ADDR_DEST    = 1b:c7:03

		Exemple 3 :
			Demande d'adresse virtuelle  pour l'objet ayant l'adresse de
			support 192.167.28.59

			OP           = 0b001
			SCAL         = 4
			SC_ADDR_SRC  = 192.167.28.4
			ADDR_SRC     = 1b:c7:03
			SC_ADDR_DEST = 192.167.28.59
			ADDR_DEST    = ff:ff:ff
	
4 - Le protocole SDCP
	Le procotole Smart Devices Control Protocol (SDCP) est un protocole de
	la couche applicative du réseau virtuel. Il va donc venir au dessus du
	protocole VIP. Il permet de définir les différentes commandes que
	peuvent utiliser les objets connectés pour communiquer et transmettre
	leurs informations.

	4.1 - En-tête du protocole
		|0  |2  |4  |6  |8  |10 |12 |14 |16 |18 |20 |22 |24 |26 |28 |
		
		,---------------------------------------------------------------
		|      ID       | T |          LENGTH           |   DATA  . . .
		'---------------------------------------------------------------
		
		ID     (8 bits)  : identifiant de la requête
		T      (2 bits)  : type de la requête
		LENGTH (14 bits) : longueur des données (en octets)
		DATA   (xx bits) : les données des requêtes

	4.2 - Identifiant de la requête
		Le champs ID contient le code correspondant à la requête que le
		paquet est chargé de transporter. Les différentes valeurs de ce
		champ sont détaillés plus loin dans ce document (section 4.5).

	4.3 - Type de requête
		Le champ T permet de déterminer le type de la requête :
			- T = 0b00 : le paquet est une requête
			- T = 0b01 : le paquet est une réponse
			- T = 0b10 : le paquet est un évènement

	4.4 - Les données
		Le champ DATA permet de stocker les données des paramètres des
		requêtes. La taille de ce champ sera déterminé par la valeur du
		champ LENGTH. Le format de ces données sera déterminé par
		l'indetifiant de la requête.

	4.5 - Liste des requêtes possibles
		Voici la liste des requêtes définies selon la version 0.2 du cahier
		des charges :

		4.5.1 - Test de présence
			Identifiant : 0x00
			Adresse : broadcast
			Description : Cette requête permet de déterminer qui est
				présent sur le réseau. C'est une requête équivalente à
				simple ping puisqu'elle ne transmet aucune information.
				Elle peut être utilisée avec les différentes adresses de
				broadcast en fonction des besoins.
			Paramètre : LENGTH = 0 (Aucun)
			Réponse : LENGTH = 0 (réponse vide)

		4.5.2 - Récupération de la liste des capteurs
			Identifiant : 0x01
			Adresse : unicast
			Description : Cette requête permet de récupérer la liste des
				capteurs dont l'objet cible est équipé. Chaque capteur
				possède un identifiant et un type.
			Paramètre : LENGTH = 0 (Aucun)
			Réponse : LENGTH = N * 3 avec N le nombre de capteurs
				- entier (1 octet)  : identifiant du capteur k (k = 0)
				- entier (2 octets) : type du capteur k
				- N-1 fois les deux lignes d'avant avec k = k + 1

		4.5.3 - Récupération de la liste des actionneurs
			Identifiant : 0x02
			Adresse : unicast
			Description : Cette requête permet de récupérer la liste des
				actionneurs dont l'objet cible est équipé. Chaque
				actionneur possède un identifiant et un type.
			Paramètre : LENGTH = 0 (Aucun)
			Réponse : LENGTH = N * 3 avec N le nombre d'actionneur
				- entier (1 octet)  : identifiant de l'actionneur k (k = 0)
				- entier (2 octets) : type de l'actionneur k
				- N-1 fois les deux lignes d'avant avec k = k + 1

		4.5.4 - Récupération de la liste des actions
			Identifiant : 0x03
			Adresse : unicast
			Description : Cette requête permet de récupérer la liste des
				actions disponibles chez l'objet cible.
			Paramètre : LENGTH = 0 (Aucun)
			Réponse : LENGTH = N * 2 avec N le nombre d'actions
				- entier (2 octets) : identifiant de l'action k (k = 0)
				- entier (2 octets) : type de l'action (voir fichier
						"actions")
				- N-1 fois la ligne d'avant avec k = k + 1

		4.5.5 - Récupération du prototype d'une action
			Identifiant : 0x04
			Adresse : unicast
			Description : Cette requête permet de connaitre la manière
				d'utiliser une action. Le prototype de l'action définit le
				nombre de paramètre ainsi que le format de chacun de ces
				paramètres. Il définit également la forme de la réponse.
			Paramètre : LENGTH = 2
				- entier (2 octets) : identifiant de l'action
			Réponse : LENGTH = xxx (indéterminé)
				Détaillée dans la partie 4.6.

		4.5.6 - Exécution d'une action
			Identifiant : 0x05
			Adresse : unicast
			Description : Cette requête permet d'exécuter une action sur un
				objet. En fonction de l'action, les paramètres diffèrent.a
				Certaines actions peuvent renvoyer des informations,
				d'autres ne font que renvoyer le code d'erreur
			Paramètre : LENGTH = xxx (indéterminé)
				Le format des paramètres est défini avec le prototype de
				l'action exécutée.
			Réponse : LENGTH = 1 + xxx (indéterminé)
				- entier (1 octet) : code d'erreur (voir partie 4.7)
				- le reste est défini par le prototype de l'action

	4.6 - Format des prototypes d'actions
		Chaque action ne possèdant pas forcément les même formats de
		paramètre. Il est nécessaire de pouvoir connaitre comment utiliser
		correctement l'action. La syntaxe de déclaration d'un prototype
		d'action doit être défini manière protocolaire pour que n'importe
		quel objet puisse comprendre comment exécuter l'action définie.

		4.6.1 - Format de déclaration d'un prototype
			- ID       (16 bits) : identifiant de l'action
			- TYPE_ACT (16 bits) : type de l'action (voir fichier "actions")
			- PARAM_NB (8 bits)  : nombre de paramètres
			Pour chaque paramètres :
				- TYPE     (4 bits)      : type du paramètre
				- SIZE     (4 bits)      : nombre d'octets du paramètre
				- MIN      (SIZE octets) : valeur minimal autorisée
				- MAX      (SIZE octets) : valeur maximal autorisée
			- RET_NB (8 bits) : nombre de paramètres de la réponse
			Pour chaque paramètres :
				- TYPE     (4 bits)      : type du paramètre
				- SIZE     (4 bits)      : nombre d'octets du paramètre
				- MIN      (SIZE octets) : valeur minimal autorisée
				- MAX      (SIZE octets) : valeur maximal autorisée

		4.6.2 - Types de paramètre
			Il existe plusieurs types d'informations transportable par
			paramètre dans un appel d'action. Voici la liste des valeurs
			que peut prendre le champ TYPE :
				- TYPE_UINT   (0x0) : nombre entier non signé
				- TYPE_INT    (0x1) : nombre entier signé (complément à 2)
				- TYPE_FLOAT  (0x2) : nombre décimal à virgule flottante
				- TYPE_BOOL   (0x3) : booléen
				- TYPE_STRING (0x4) : chaine de caractère (termine par 0)

			Dans le cas des paramètres de type chaine de caractère, les
			champs MIN et MAX sont omis. Le paramètre SIZE n'est pas lu.

	4.7 - Code d'erreur d'exécution d'une action
		Si l'exécution d'une action ne respecte pas le prototype de
		celle-ci ou si l'objet n'a pas réussi à faire le travail demandé,
		l'objet cible doit alors répondre en incluant l'un des codes
		d'erreur suivant :

		| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |

		,-------------------------------,
		|      ERR      |     PARAM     |
		'-------------------------------'

		Valeur du champ ERR :
			- ERR_SUCCESS (0x0) : tous s'est bien passé
			- ERR_UNKNOWN (0x1) : action inconnue
			- ERR_FORMAT  (0x2) : erreur dans le format d'un paramètre
				PARAM = le numéro du paramètre
			- ERR_PRMS_NB (0x3) : erreur de nombre de paramètres
				PARAM = le vrai nombre de paramètres
			- ERR_EXEC    (0x4) : erreur d'exécution de l'action

